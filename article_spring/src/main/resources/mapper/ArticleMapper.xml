<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.koo.article_spring.repository.mybatis.ArticleMapper">

    <!-- 조건에 맞춘 게시글 수 반환  -->
    <select id="getArticleTotalCount" parameterType="Pagination" resultType="Integer">
        SELECT COUNT(*)
        FROM articles
        WHERE 1=1
        <if test="categoryId != null">
            AND category_id = #{categoryId}
        </if>
        <if test="searchTerm != null and !''.equals(searchTerm) ">
            AND (author LIKE CONCAT('%', #{searchTerm}, '%') OR title LIKE CONCAT('%', #{searchTerm}, '%') OR contents
            LIKE CONCAT('%', #{searchTerm}, '%'))
        </if>
        <if test="startDate != null and endDate != null">
            AND create_time BETWEEN #{startDate} AND #{endDate}
        </if>
    </select>

    <!--조건에 맞춘 게시글 반환-->
    <select id="getArticleList" parameterType="Pagination" resultType="ArticleDTO">
        SELECT
        articles.title AS title,
        articles.contents AS contents,
        articles.author AS author,
        articles.views AS views,
        articles.create_time AS create_time,
        articles.modified_time AS modified_time,
        articles.category_id AS category_id,
        articles.article_id,
        CASE WHEN COUNT(file_upload.article_id) > 0 THEN true ELSE false END AS has_file
        FROM articles
        LEFT JOIN file_upload ON articles.article_id = file_upload.article_id
        WHERE 1=1
        <if test="categoryId != null">
            AND category_id = #{categoryId}
        </if>
        <if test="searchTerm != null and !''.equals(searchTerm) ">
            AND (author LIKE CONCAT('%', #{searchTerm}, '%') OR title LIKE CONCAT('%', #{searchTerm}, '%') OR contents
            LIKE CONCAT('%', #{searchTerm}, '%'))
        </if>
        <if test="startDate != null and endDate != null">
            AND create_time BETWEEN #{startDate} AND #{endDate}
        </if>
        GROUP BY articles.article_id
        ORDER BY article_id DESC
        LIMIT #{start}, #{recordsPerPage}
    </select>

    <!-- 단일 게시글 정보 반환 -->
    <select id="getArticle" parameterType="Integer" resultType="ArticleDTO">
        SELECT
            author,
            title,
            views,
            contents,
            create_time,
            category_id,
            modified_time,
            article_id
        FROM articles
        WHERE article_id = #{articleId}
    </select>

    <!-- 비밀번호 얻기 -->
    <select id="getPassword" parameterType="Integer" resultType="String">
        SELECT password
        FROM articles
        WHERE article_id = #{articleId}
    </select>

    <!-- 게시글 등록 -->
    <insert id="insertArticle" parameterType="ArticleDTO" useGeneratedKeys="true" keyProperty="articleId">
        INSERT INTO articles (category_id, author, password, title, contents, create_time, modified_time)
        VALUES (#{categoryId}, #{author}, #{password}, #{title}, #{contents}, #{createTime}, #{modifiedTime})
    </insert>

    <!-- 조회수 올리기 -->
    <update id="updateViews" parameterType="ArticleDTO">
        UPDATE articles
        SET views = #{views}
        WHERE article_id = #{articleId}
    </update>

    <!-- 게시글 수정  -->
    <update id="updateArticle" parameterType="ArticleDTO">
        UPDATE articles
        SET modified_time = #{modifiedTime}, author = #{author}, title = #{title}, contents = #{contents}
        WHERE article_id = #{articleId}
    </update>
</mapper>

